
Depth-First Traversal using iterations Using a Stack

Java Runtime Stack(call stack) [x,y]  (remember values and arguments in between method calls)
[x] -> execute y
[] -> execute x
method(x)
    method(y)

push(root)
while(stack is not empty)
current = pop()
visit(current)
push each unvisited neighbours on to the stack


C <--- A ---> B -->D         traverse('A')
|--------------|
|______________|
|______________|        while(stack is not empty){
|______________|
|    Root(A)   |         set.add(stack.pop())
-----------------       lopp over adjencyList.get(A)
                         stack.push(B,C))

|--------------|
|______________|
|______________|
|_____C________|
|     B        |         set.add(stack.pop())
-----------------       lopp over adjencyList.get(C)
                          stack.push(nothing))

 |--------------|
 |______________|
 |______________|
 |______________|
 |     B        |         set.add(stack.pop())
 -----------------         lopp over adjencyList.get(B)
                            stack.push(D))

  Breadth-first Traversal (Iterative) Using Queue
  C<-A->B->D-       Start From A
  ^         |       print A and visit its unvisited neighbours B and C F[B,C]R
  |_________|       print B and visit its unvisited neighbours D   F[C,D]R
                    print C and visit its unvisited neighbours Null F[D]R
                    print D and visit its unvisited neighbours C, but already visited C finally stop.